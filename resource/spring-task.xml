<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
    <!-- 如下实现是通过线程池执行的 -->
    <task:executor id="executor" pool-size="10"/>
    <task:scheduler id="scheduler" pool-size="10"/>
    <task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true"/>
    
    <bean id="taskController" class="com.zs.common.task.SpringTaskController"></bean>
    <bean id="oaTaskController" class="com.zs.common.task.OaTaskController"></bean>
    <bean id="ZsSystemTaskController" class="com.zs.common.task.ZsSystemTaskController"></bean>
    <bean id="XsSystemTaskController" class="com.zs.common.task.XsSystemTaskController"></bean>
    
    <task:scheduled-tasks scheduler="scheduler">
    
        <!--示例 指定时间执行  -->
        <!-- <task:scheduled ref="taskController" method="task" cron="15 04 10,12,14,19 * * *" /> -->

        <!--示例 心跳执行   单位毫秒 --> 
        <!--  <task:scheduled ref="taskController" method="task1" fixed-rate="5000"  /> -->
    
    	<!-- OA系统定时任务 -->
		<!-- OA系统考勤机同步 * 40 8,12,14,19 * * *  -->
		<task:scheduled ref="oaTaskController" method="AttendSynchTask" cron="0 37 8,9,12,14,15,19,20 * * ?" />
        <!-- <task:scheduled ref="oaTaskController" method="AttendSynchTask" cron="0 17 8,9,11,14,15,19,20 * * ?" /> -->
        <!-- 招商系统定时任务 -->
        <task:scheduled ref="ZsSystemTaskController" method="autoAllocateToPublicCustomer" cron="0 55 7 * * ?" /> <!-- 7:55 --> 
        <task:scheduled ref="ZsSystemTaskController" method="autoRebackInvalidCustomer" cron="0 5 8 * * ?" /> <!-- 8:05 -->
          
        <!-- 销售系统定时任务 -->
        <task:scheduled ref="XsSystemTaskController" method="autoUpdateOppStatus" cron="0 15 8 * * ?" /><!-- 8:15 -->
        <task:scheduled ref="XsSystemTaskController" method="autoAllocateToPublicCustomer" cron="0 20 8 * * ?" /> <!-- 8:20 -->
        <task:scheduled ref="XsSystemTaskController" method="autoRebackInvalidCustomer" cron="0 27 8 * * ?" /><!-- 8:27 -->
      
    </task:scheduled-tasks>
    
    <!--   说明  
    cron表达式：* * * * * *（共6位，使用空格隔开）
    cron表达式：*(秒0-59) *(分钟0-59) *(小时0-23) *(日期1-31) *(月份1-12或是JAN-DEC) *(星期1-7或是SUN-SAT)
    
    Cron表达式是一个字符串，字符串以5或6个空格隔开，分开工6或7个域，每一个域代表一个含义,Cron有如下两种语法 
	
	代码
	Seconds:可出现,-  *  / 四个字符，有效范围为0-59的整数    
	Minutes:可出现,-  *  / 四个字符，有效范围为0-59的整数    
	Hours:可出现,-  *  / 四个字符，有效范围为0-23的整数    
	DayofMonth:可出现,-  *  / ? L W C八个字符，有效范围为0-31的整数     
	Month:可出现,-  *  / 四个字符，有效范围为1-12的整数或JAN-DEc    
	DayofWeek:可出现,-  *  / ? L C #四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推    
	Year:可出现,-  *  / 四个字符，有效范围为1970-2099年
	 
	每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：
	
	代码
	(1)*：表示匹配该域的任意值，假如在Minutes域使用*,即表示每分钟都会触发事件。    
	   
	(2)?:只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13  13 15 20 * ?,其中最后一位只能用？，而不能使用*，如果使用*表示不管星期几都会触发，实际上并不是这样。    
	   
	(3)-:表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次    
	   
	(4)/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次.    
	   
	(5),:表示列出枚举值值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。    
	   
	(6)L:表示最后，只能出现在DayofWeek和DayofMonth域，如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。    
	   
	(7)W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份    
	   
	(8)LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。    
	   
	(9)#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。    
	举几个例子:
	
	代码
	0 0  2  1 *  ? *  表示在每月的1日的凌晨2点调度任务     
	0 15 10 ? *  MON-FRI 表示周一到周五每天上午10：15执行作业             
	0 15 10 ? 6L 2002-2006 表示200-2006年的每个月的最后一个星期五上午10:15执行作业   
	91linux
	
	一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。
	按顺序依次为 
	秒（0~59） 
	分钟（0~59）
	小时（0~23）
	天（月）（0~31，但是你需要考虑你月的天数）
	月（0~11）
	天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）
	7.年份（1970－2099）
	其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于"月份中的日期"和"星期中的日期"这两个元素互斥的,必须要对其中一个设置?.
	0 0 10,14,16 * * ? 每天上午10点，下午2点，4点
	0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时
	0 0 12 ? * WED 表示每个星期三中午12点 
	"0 0 12 * * ?" 每天中午12点触发 
	"0 15 10 ? * *" 每天上午10:15触发 
	"0 15 10 * * ?" 每天上午10:15触发 
	"0 15 10 * * ? *" 每天上午10:15触发 
	"0 15 10 * * ? 2005" 2005年的每天上午10:15触发 
	"0 * 14 * * ?" 在每天下午2点到下午2:59期间的每1分钟触发 
	"0 0/5 14 * * ?" 在每天下午2点到下午2:55期间的每5分钟触发 
	"0 0/5 14,18 * * ?" 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 
	"0 0-5 14 * * ?" 在每天下午2点到下午2:05期间的每1分钟触发 
	"0 10,44 14 ? 3 WED" 每年三月的星期三的下午2:10和2:44触发 
	"0 15 10 ? * MON-FRI" 周一至周五的上午10:15触发 
	"0 15 10 15 * ?" 每月15日上午10:15触发 
	"0 15 10 L * ?" 每月最后一日的上午10:15触发 
	"0 15 10 ? * 6L" 每月的最后一个星期五上午10:15触发 
	"0 15 10 ? * 6L 2002-2005" 2002年至2005年的每月的最后一个星期五上午10:15触发 
	"0 15 10 ? * 6#3" 每月的第三个星期五上午10:15触发
	* 40 8,12,14,19 * * *
     -->
</beans>